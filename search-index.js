var searchIndex = JSON.parse('{\
"component":{"doc":"","t":[6,8,3,11,11,11,10,11,11,11,10,11,11,11],"n":["IrrecoverableError","Manageable","Supervisor","borrow","borrow_mut","from","handle_irrecoverable","into","new","spawn","start","try_from","try_into","type_id"],"q":["component","","","","","","","","","","","","",""],"d":["","In order to be Manageable, a user defines the following …","A Supervisor is instantiated to supervise a task that …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new supervisor using a Manageable component.","Spawn calls the start function of the Manageable component …","","","",""],"i":[0,0,0,1,1,1,2,1,1,1,2,1,1,1],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0],["irrecoverableerror",6]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[["",0],["sender",3,[["error",3]]],["oneshotreceiver",3]],["pin",3,[["box",3,[["future",8]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Supervisor"],[8,"Manageable"]]},\
"name_variant":{"doc":"Generates methods to print the name of the enum variant.","t":[24],"n":["NamedVariant"],"q":["name_variant"],"d":[""],"i":[0],"f":[null],"p":[]},\
"rccheck":{"doc":"The purpose of this module is to afford the user that …","t":[8,16,3,16,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,10,11,10,2,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11],"n":["Certifiable","KeyPair","Psk","PublicKey","borrow","borrow_key_bytes","borrow_mut","borrow_spki","client_auth_mandatory","client_auth_root_subjects","clone","clone_into","deserialize","ed25519_certgen","eq","fmt","from","from_der","into","keypair_to_certificate","offer_client_auth","public_key_to_spki","rustls","serialize","to_owned","try_from","try_into","type_id","verify_client_cert","verify_server_cert","vzip","with_key_bytes","with_spki","with_spki_mut","Ed25519","borrow","borrow_mut","from","into","keypair_to_certificate","public_key_to_spki","try_from","try_into","type_id","vzip"],"q":["rccheck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rccheck::ed25519_certgen","","","","","","","","","",""],"d":["A trait that offers the key conversions necessary for …","","The self-referencing struct.","","","Provides limited immutable access to <code>key_bytes</code>. This …","","Provides an immutable reference to <code>spki</code>. This method was …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","This generates a self-signed X509 certificate with the …","","This generates X.509 <code>SubjectPublicKeyInfo</code> (SPKI) bytes (in …","","","","","","","","","","Provides limited immutable access to <code>key_bytes</code>. This …","Provides an immutable reference to <code>spki</code>. This method was …","Provides a mutable reference to <code>spki</code>. This method was …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","KISS function to generate a self signed certificate from a …","This produces X.509 <code>SubjectPublicKeyInfo</code> (SPKI) as defined …","","","",""],"i":[0,1,0,1,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,1,0,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["vec",3]],[[["",0]],["",0]],[[["",0]],["subjectpublickeyinfo",3]],[[["",0]],["option",4,[["bool",0]]]],[[["",0]],["option",4,[["distinguishednames",6]]]],[[["",0]]],[[["",0],["",0]]],[[],["result",4]],null,[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["result",4,[["psk",3],["error",3]]]],[[]],[[],["result",4,[["certificate",3],["error",3]]]],[[["",0]],["bool",0]],[[],["vec",3,[["u8",0]]]],null,[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["certificate",3],["systemtime",3]],["result",4,[["clientcertverified",3],["error",4]]]],[[["",0],["certificate",3],["servername",4],["iterator",8],["systemtime",3]],["result",4,[["servercertverified",3],["error",4]]]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["result",4,[["certificate",3],["error",3]]]],[[],["vec",3,[["u8",0]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[8,"Certifiable"],[3,"Psk"],[3,"Ed25519"]]},\
"telemetry_subscribers":{"doc":"This is a library for common Tokio Tracing subscribers, …","t":[3,3,11,11,11,11,12,11,11,11,12,11,11,11,5,11,11,12,12,12,12,11,12,11,11,11,11,11,11,11,11],"n":["TelemetryConfig","TelemetryGuards","borrow","borrow","borrow_mut","borrow_mut","chrome_trace_output","clone","clone_into","default","enable_tracing","fmt","from","from","init","into","into","json_log_output","log_file","log_level","service_name","to_owned","tokio_console","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["telemetry_subscribers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Configuration for different logging/tracing options","","","","","","Write chrome trace output, which can be loaded from …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize telemetry subscribers based on TelemetryConfig …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Output JSON logs.  Tracing and Tokio Console are not …","If defined, write output to a file starting with this …","Log level to set, defaults to info","The name of the service for Jaeger and Bunyan","","","","","","","","","",""],"i":[0,0,1,2,1,2,2,2,2,2,2,2,1,2,0,1,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["telemetryconfig",3]],[[["",0],["",0]]],[[],["telemetryconfig",3]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["telemetryconfig",3]],["telemetryguards",3]],[[]],[[]],null,null,null,null,[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]]],"p":[[3,"TelemetryGuards"],[3,"TelemetryConfig"]]},\
"typed_store":{"doc":"","t":[13,13,2,13,13,13,3,4,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,0,11,0,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,3,3,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,16,16,16,8,16,10,10,10,11,10,10,10,10,10,10,10,10,10],"n":["Delete","DeleteAll","Map","NotifyRead","Read","ReadAll","Store","StoreCommand","StoreError","Write","WriteAll","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","into","into","new","notify_read","read","read_all","remove","remove_all","reopen","rocks","to_owned","traits","try_from","try_from","try_into","try_into","type_id","type_id","write","write_all","0","0","0","0","0","0","0","1","1","1","1","1","1","CrossDBBatch","DBBatch","DBMap","RocksDBError","SerializationError","TypedStoreError","UnregisteredColumn","batch","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","contains_key","delete_batch","delete_range","deserialize","eq","fmt","fmt","fmt","from","from","from","from","from","get","hash","insert","insert_batch","into","into","into","is_empty","iter","keys","multi_get","multi_insert","multi_remove","ne","new","open","open_cf","open_cf_opts","remove","reopen","rocksdb","serialize","to_owned","to_owned","to_string","try_extend","try_extend_from_slice","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","write","0","0","0","Error","Iterator","Keys","Map","Values","clear","contains_key","get","get_or_insert","insert","is_empty","iter","keys","multi_get","multi_insert","multi_remove","remove","values"],"q":["typed_store","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typed_store::StoreCommand","","","","","","","","","","","","","typed_store::rocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typed_store::rocks::TypedStoreError","","","typed_store::traits","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Fetches all the values for the provided keys.","","Atomically removes all the data referenced by the provided …","A helper macro to reopen multiple column families. The …","","","","","","","","","","","Atomically writes all the key-value pairs in storage. If …","","","","","","","","","","","","","","","Provides a mutable struct to form a collection of database …","An interface to a rocksDB database, keyed by a columnfamily","","","","","","","","","","","","","","","","","","Deletes a set of keys given as an iterator","Deletes a range of keys between <code>from</code> (inclusive) and <code>to</code> …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","inserts a range of (key, value) pairs given as an iterator","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns a vector of values corresponding to the keys …","","","","Create a new batch associated with a DB reference.","Opens a database from a path, with specific options and an …","Opens a database with options, and a number of column …","Opens a database with options, and a number of column …","","Reopens an open database as a typed map operating under a …","","","","","","","","","","","","","","","","","","Consume the batch and write its operations to the database","","","","","","","","","Removes every key-value pair from the map.","Returns true if the map contains a value for the specified …","Returns the value for the given key from the map, if it …","Returns the value for the given key from the map, if it …","Inserts the given key-value pair into the map.","Returns true if the map is empty, otherwise false.","Returns an iterator visiting each key-value pair in the …","Returns an iterator over each key in the map.","Returns a vector of values corresponding to the keys …","Inserts key-value pairs.","Removes keys.","Removes the entry for the given key from the map.","Returns an iterator over each value in the map."],"i":[1,1,0,1,1,1,0,0,0,1,1,1,2,1,2,2,2,1,2,1,2,2,2,2,2,2,2,0,0,2,0,1,2,1,2,1,2,2,2,3,4,5,6,7,8,9,3,4,6,7,8,9,10,0,0,10,10,0,10,11,12,10,11,12,10,11,11,10,11,10,11,11,12,12,10,10,10,10,11,12,10,10,10,11,11,10,11,12,12,10,11,11,11,11,11,11,11,10,12,11,0,0,11,11,11,10,10,11,10,11,11,12,10,11,12,10,11,12,10,11,11,12,13,14,15,16,16,16,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["store",3]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[["dbmap",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["dbbatch",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",4,[["typedstoreerror",4]]]],[[["",0]],["typedstoreerror",4]],[[["",0]],["dbmap",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["result",4,[["bool",0],["typedstoreerror",4]]]],[[["dbmap",3]],["result",4,[["typedstoreerror",4]]]],[[["dbmap",3],["",0],["",0]],["result",4,[["typedstoreerror",4]]]],[[],["result",4]],[[["",0],["typedstoreerror",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",6]]],[[]],[[["rockserror",3]]],[[]],[[["",0],["",0]],["result",4,[["option",4],["typedstoreerror",4]]]],[[["",0],["",0]]],[[["",0],["",0],["",0]],["result",4,[["typedstoreerror",4]]]],[[["dbmap",3]],["result",4,[["typedstoreerror",4]]]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["vec",3,[["option",4]]],["typedstoreerror",4]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["typedstoreerror",4]],["bool",0]],[[["arc",3]]],[[["asref",8,[["path",3]]],["option",4,[["options",3]]],["option",4,[["str",0]]]],["result",4,[["typedstoreerror",4]]]],[[["asref",8,[["path",3]]],["option",4,[["options",3]]]],["result",4,[["arc",3,[["dbwiththreadmode",3,[["multithreaded",3]]]]],["typedstoreerror",4]]]],[[["asref",8,[["path",3]]],["option",4,[["options",3]]]],["result",4,[["arc",3,[["dbwiththreadmode",3,[["multithreaded",3]]]]],["typedstoreerror",4]]]],[[["",0],["",0]],["result",4,[["typedstoreerror",4]]]],[[["arc",3],["option",4,[["str",0]]]],["result",4,[["typedstoreerror",4]]]],null,[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0],["",0]],["result",4]],[[["",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[],["result",4,[["typedstoreerror",4]]]],null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0],["",0]],["result",4,[["bool",0]]]],[[["",0],["",0]],["result",4,[["option",4]]]],[[["",0],["",0],["fnonce",8]],["result",4]],[[["",0],["",0],["",0]],["result",4]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["vec",3,[["option",4]]]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0]]]],"p":[[4,"StoreCommand"],[3,"Store"],[13,"Write"],[13,"WriteAll"],[13,"Delete"],[13,"DeleteAll"],[13,"Read"],[13,"ReadAll"],[13,"NotifyRead"],[4,"TypedStoreError"],[3,"DBMap"],[3,"DBBatch"],[13,"RocksDBError"],[13,"SerializationError"],[13,"UnregisteredColumn"],[8,"Map"]]},\
"x":{"doc":"","t":[3,4,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,12,3,7,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,11,11,11,11],"n":["Args","Command","Lint","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","cmd","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_arg_matches","from_arg_matches","has_subcommand","init","init","into","into","into_app","into_app","into_app_for_update","into_app_for_update","lint","main","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","0","Args","LICENSE_HEADER","augment_args","augment_args_for_update","borrow","borrow_mut","deref","deref_mut","drop","fail_fast","fmt","from","from_arg_matches","init","into","into_app","into_app_for_update","run","try_from","try_into","type_id","update_from_arg_matches"],"q":["x","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x::Command","x::lint","","","","","","","","","","","","","","","","","","","","",""],"d":["Simple program to greet a person","","Run lints","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,1,2,2,1,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,1,0,0,2,1,2,1,2,1,2,1,3,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4],"f":[null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["str",0]],["bool",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],null,[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["usize",0]],[[]],[[],["command",6]],[[],["command",6]],[[["args",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]]],"p":[[4,"Command"],[3,"Args"],[13,"Lint"],[3,"Args"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};